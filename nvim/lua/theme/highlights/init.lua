-- local Group = require("colorbuddy").Group
-- local colors = require("colorbuddy").colors
-- local styles = require("colorbuddy").styles
--
-- -- call heirarchy
-- Group.new("CallHierarchyIcon", colors.primary)
-- Group.new("CallHierarchyTitle", colors.secondary)
-- -- outline
-- Group.new("OutlineIndent", colors.mfed_7)
-- -- terminal
-- Group.new("TerminalNormal", colors.secondary, colors.nb_background)
--
-- -- Signs
-- Group.new("diffAdded", colors.add_fg)
-- Group.new("diffRemoved", colors.remove_fg)
-- Group.new("diffChanged", colors.blue_fg)
-- Group.new("GitSignsChange", colors.indigo_fg)
--
-- Group.new("GitSignsAdd", colors.add_fg)
-- Group.new("GitSignsDelete", colors.remove_fg)
--
-- Group.new("diffFile", colors.primary)
-- Group.new("diffNewFile", colors.primary)
-- Group.new("diffLine", colors.primary)
-- -- DiffView
-- Group.new("DiffAdd", nil, colors.add)
-- Group.new("DiffDelete", nil, colors.remove)
-- Group.new("DiffChange", nil, colors.change)
-- Group.new("DiffText", nil, colors.change)
--
-- -- LuaLine
-- Group.new("WinBar", nil, nil, nil)
-- Group.new("WinBarNC", nil, nil, nil)
--
-- Group.new("TelescopeBorder", colors.mfed_bg_accent, nil)
--
-- -- Obsidian

--
-- -- -- Mason

--
-- Group.new("Bold", nil, nil, styles.bold)
-- Group.new("Debug", colors.debug, colors.debug)
--
-- Group.new("IlluminatedWordText", nil, colors.mfed_9, nil)
-- Group.new("IlluminatedWordRead", nil, colors.mfed_9, nil)
-- Group.new("IlluminatedWordWrite", nil, colors.mfed_9, nil)
--
-- Group.new("InclineNormal", colors.mfed_2, nil)
-- Group.new("InclineNormalNC", colors.mfed_6, nil)
-- Group.new("TreesitterContext", nil, colors.mfed_bg_accent)
--
-- local notify_config = {
-- 	{ "NotifyERRORBorder", colors.mfed_bg_accent },
-- 	{ "NotifyWARNBorder", colors.mfed_bg_accent },
-- 	{ "NotifyINFOBorder", colors.mfed_bg_accent },
-- 	{ "NotifyDEBUGBorder", colors.mfed_bg_accent },
-- 	{ "NotifyTRACEBorder", colors.mfed_bg_accent },
-- }
--
-- local snacks_config = {
-- 	{ "SnacksInputNormal", colors.white, colors.bg_shade },
-- 	{ "SnacksInputTitle", colors.mfed_4 },
-- }
--
-- local snacks_picker_config = {
-- 	prefix = "SnacksPicker",
-- 	{ "", nil, colors.nb_background },
-- 	{ "Border", colors.nb_background },
-- 	{ "Dir", colors.mfed_6 },
-- 	{ "File", colors.mfed_3 },
-- 	{ "Match", colors.white },
-- 	{ "Row", colors.dimmed_white },
-- 	{ "Col", colors.dimmed_white },
-- 	{ "Box", nil, colors.debug },
-- }
--
-- local snacks_indent = {
-- 	prefix = "SnacksIndent",
-- 	{ "", colors.mfed_9 },
-- 	{ "Scope", colors.mfed_8 },
-- }
--
-- local gpt_config = {
-- 	{
-- 		"ChatGPTNormal",
-- 		colors.dimmed_white,
-- 		colors.nb_background,
-- 	},
-- 	{
-- 		"CopilotChatSpinner",
-- 		colors.white,
-- 		nil,
-- 	},
-- }
--
-- local mini_hipatterns_config = {
-- 	prefix = "MiniHiPatterns",
-- 	{ "Todo", colors.remove_fg },
-- 	{ "MdDate", colors.magenta_fg:light() },
-- 	{ "MdDone", colors.add_fg },
-- 	{ "MDStuff", colors.blue_fg },
-- }
--
-- local avante_config = {
-- 	prefix = "Avante",
-- 	{ "SidebarNormal", nil, colors.nb_background },
-- 	{ "SidebarWinHorizontalSeparator", nil, colors.nb_background },
-- 	{ "SidebarWinSeparator", colors.mfed_bg_accent, colors.nb_background },
-- 	{ "InlineHint", colors.mfed_7 },
-- }
--
-- local mini_file_config = {
-- 	prefix = "MiniFiles",
-- 	{ "BorderModified", colors.indigo_fg },
-- 	{ "Title", colors.mfed_6 },
-- 	{ "TitleFocused", colors.mfed_6 },
-- }
--
-- -- for _, lvl in ipairs(level) do
-- -- 	for _, group in ipairs({ "Icon", "Title" }) do
-- -- 		local hl_group = "Notify" .. lvl[1] .. group
-- -- 		local hl_color = lvl[2]
-- --
-- -- 		notify_config[#notify_config + 1] = { hl_group, hl_color }
-- -- 	end
-- -- end
--
-- local render_markdown = {
-- 	prefix = "RenderMarkdown",
-- 	{ "CodeInline", nil, colors.background },
-- 	{ "Code", nil, colors.mfed_bg_accent_light },
-- 	{ "Quote", colors.indigo_fg },
-- 	{ "Update", colors.magenta_fg:light() },
-- 	{ "TableHead", colors.mfed_bg_accent },
-- 	{ "TableRow", colors.mfed_bg_accent },
-- 	{ "WikiLink", colors.mfed_navy, nil },
-- 	{ "Link", colors.mfed_navy, nil },
-- }
--
-- local hl_group_configs = {
-- 	notify_config,
-- 	gpt_config,
-- 	snacks_config,
-- 	snacks_picker_config,
-- 	mini_hipatterns_config,
-- 	avante_config,
-- 	snacks_indent,
-- 	mini_file_config,
-- 	bqf_config,
-- 	render_markdown,
-- }
--
-- --- @class HlConfig
-- --- @field fg string
-- --- @field bg (string|nil)
-- --- @field guicg? string
--
-- --- @param group string
-- --- @param M HlConfig
-- --- @return nil
-- local set_hl = function(group, M)
-- 	local bg = M.bg or nil
-- 	local guicg = M.guicg or nil
--
-- 	Group.new(group, M.fg, bg, guicg)
-- end
--
-- for _, config in ipairs(hl_group_configs) do
-- 	local prefix = config.prefix or ""
-- 	for _, l in ipairs(config) do
-- 		local group = prefix .. l[1]
-- 		local fg = l[2]
-- 		local bg = l[3] or nil
-- 		local guicg = l[4] or nil
--
-- 		set_hl(group, { fg = fg, bg = bg, guicg = guicg })
-- 	end
-- end
--
-- local hl = require("utils").loaddir("lua/theme/highlights/*.lua", { "theme.highlights.init" })
--
-- ---@alias GroupDefinition { [1]: string, [2]: string, [3]?: string, bold?: boolean, italic?: boolean, link?: boolean, underline?: boolean, sp?: string }
-- ---@alias _HlConfig {prefix?: string, fg?: string} | GroupDefinition[]
--
-- ---@param config _HlConfig
-- local function apply_hl(config)
-- 	local prefix = config.prefix or ""
-- 	local gl_fg = config.fg
-- 	for _, l in ipairs(config) do
-- 		local group = prefix .. l[1]
-- 		local link = l.link or false
--
-- 		if link then
-- 			vim.api.nvim_set_hl(0, group, {
-- 				link = l[2],
-- 			})
-- 		else
-- 			local fg = l[2] or gl_fg or nil
-- 			local bg = l[3] or nil
--
-- 			vim.api.nvim_set_hl(0, group, {
-- 				foreground = fg,
-- 				background = bg,
-- 				bold = l.bold,
-- 				underline = l.underline,
-- 				italic = l.italic,
-- 				sp = l.sp,
-- 				force = true,
-- 			})
-- 		end
-- 	end
-- end
--
-- for _, config in pairs(hl) do
-- 	apply_hl(config)
-- end
--
-- Group.new("WinSeparator", colors.mfed_bg_accent)
-- Group.new("Folded", nil, colors.nb_background)
return {}
